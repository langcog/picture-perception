---
title: "Picture perception analysis"
format: html
---

```{r}
install.packages("emmeans")
install.packages("brms")
install.packages("tidybayes")
install.packages("broom.mixed")
install.packages("psych")
install.packages("lavaan")

library(here)
library(tidyverse)
library(lme4)
library(emmeans)
library(brms)
library(tidybayes)
library(broom.mixed)
library(psych)
library(lavaan)
```

```{r}
d <- read_csv(here("data","kisumu_vocab_data.csv"))
```
# visualization

```{r}
ms <- d |>
  group_by(child, condition, age) |>
  summarise(accuracy = mean(accuracy))
```

Age distribution. 

```{r}
ggplot(ms, aes(x = age)) + 
  geom_histogram(binwidth = .5)
```



```{r}
ggplot(ms, aes(x = age, y = accuracy, col = condition)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Age (months)")
```

# Preregistered analyses

Let's set objects to the reference level. We'll also center age for interpretability. 

These models fail to converge pretty substantially with the maximal preregistered random effects structure. 

Also, good practice to center age to make the intercept more interpretable. (Helps with convergence too often).

```{r}
d$condition <- relevel(factor(d$condition), ref = "obj")
d$age_centered <- scale(d$age, scale = FALSE, center = TRUE)[,1]
```

First model. 

```{r}
mod <- glmer(accuracy ~ condition + (condition | child) + (condition | target_word),
             data = d, family = "binomial")
summary(mod)
```

We remove random effects following our general lab protocol. This results in crossed intercepts but no slopes. 

```{r}
mod_pruned <- glmer(accuracy ~ condition + (1 | child) + (1 | target_word), 
             data = d, family = "binomial")
summary(mod_pruned)

cc <- confint(mod_pruned,parm="beta_",method="Wald")
ctab <- cbind(est=fixef(mod_pruned),cc)
rtab <- exp(ctab)
print(rtab,digits=3)


```

This shows pretty clearly that age is worse.

We fit the same preregistered model with age. 

```{r}
mod_age <- glmer(accuracy ~ condition * age_centered + 
                   (condition | child) + 
                   (condition * age_centered | target_word), 
              data = d, family = "binomial")
summary(mod_age)
```

Again we prune - random slopes are singular, but the intercepts converge. 

```{r}
mod_age_pruned <- glmer(accuracy ~ condition * age_centered + 
                   (1 | child) + 
                   (1 | target_word), 
              data = d, family = "binomial")
summary(mod_age_pruned)

cc_age <- confint(mod_age_pruned,parm="beta_",method="Wald")
ctab_age <- cbind(est=fixef(mod_age_pruned),cc_age)
rtab_age <- exp(ctab_age)
print(rtab_age,digits=3)
```

You also get a pretty clear age interaction: BW is worse and grows more slowly. 

The other conditions are definitely better and don't appear to be distinguishable from object. 

# More viz

Because this is a within-subjects analysis, we can look at the effect for each kid by basic subtraction.

```{r}
ms <- ms |>
  group_by(child) |>
  mutate(effect = accuracy - accuracy[condition == "obj"])

ggplot(filter(ms, condition != "obj"),
       aes(x = age, y = effect)) + 
  geom_jitter(alpha = .3, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  geom_hline(yintercept = 0, lty = 2) + 
  facet_wrap(~condition) + 
  ylab("Accuracy compared to object") +
  xlab("Age (months)")
```
This confirms our analysis above. 

Now running exploratory Bayesian analyses with full models - first in pre-registered model without age
```{r}
bayes_mod <- brm(formula = accuracy ~ condition + (condition | child) + (condition | target_word),
                 family=bernoulli(link="logit"), data = d, seed = 1)

joint_tests(bayes_mod)

#no effect of condition in model without age

```
Get posterior estimates + 95% credible intervals

```{r}
bayes_mod %>%
  as_draws_df() %>%
  select(starts_with("b_")) %>% 
  mutate(obj = b_Intercept, 
         bw = b_Intercept + b_conditionbw, 
     	   cartoon = b_Intercept + b_conditioncartoon,
         photo = b_Intercept + b_conditionphoto) %>%
  select(obj, photo, cartoon, bw) %>%
  mean_hdi() %>%
  pivot_longer(cols = -c(.width:.interval),
               names_to = "index",
               values_to = "value") %>% 
  select(index, value) %>% 
  mutate(index = ifelse(str_detect(index, fixed(".")), index, str_c(index, ".mean"))) %>% 
  separate(index, into = c("parameter", "type"), sep = "\\.") %>% 
  pivot_wider(names_from = type, 
              values_from = value) %>%
  mutate_at(vars(2:4), plogis)

emmeans_bayes_mod <- bayes_mod%>% emmeans(specs = pairwise~condition)
summary(emmeans_bayes_mod)
```

Second, running exploratory Bayesian analyses with full model with age
```{r}
bayes_mod_age <- brm(formula = accuracy ~ condition * age_centered + 
                   (condition | child) + 
                   (condition * age_centered | target_word),
                 family=bernoulli(link="logit"), data = d, seed = 1)

joint_tests(bayes_mod_age)

#main effect of age, no effect of condition

#model term             df1 df2 F.ratio  Chisq p.value
#condition                3 Inf   1.536  4.608  0.2027
#age_centered             1 Inf  15.569 15.569  0.0001
#condition:age_centered   3 Inf   1.594  4.782  0.1886
```

Get posterior estimates + 95% credible intervals
```{r}
bayes_mod_age %>%
  as_draws_df() %>%
  select(starts_with("b_")) %>% 
  mutate(obj = b_Intercept, 
         bw = b_Intercept + b_conditionbw, 
     	   cartoon = b_Intercept + b_conditioncartoon,
         photo = b_Intercept + b_conditionphoto) %>%
  select(obj, photo, cartoon, bw) %>%
  mean_hdi() %>%
  pivot_longer(cols = -c(.width:.interval),
               names_to = "index",
               values_to = "value") %>% 
  select(index, value) %>% 
  mutate(index = ifelse(str_detect(index, fixed(".")), index, str_c(index, ".mean"))) %>% 
  separate(index, into = c("parameter", "type"), sep = "\\.") %>% 
  pivot_wider(names_from = type, 
              values_from = value) %>%
  mutate_at(vars(2:4), plogis)

bayes_mod_age%>% emmeans(specs = pairwise~condition)
```

Run Bayesian analyses on pruned model without age

```{r}
bayes_mod_pruned <- brm(formula = accuracy ~ condition + (1 | child) + (1 | target_word),
                 family=bernoulli(link="logit"), data = d, seed = 1)

summary(bayes_mod_pruned)

joint_tests(bayes_mod_pruned)

#effect of condition
#model term df1 df2 F.ratio Chisq p.value
#condition    3 Inf   2.654 7.962  0.0468
```

Get posterior estimates and 95% credible intervals

```{r}
bayes_mod_pruned %>%
  as_draws_df() %>%
  select(starts_with("b_")) %>% 
  mutate(obj = b_Intercept, 
         bw = b_Intercept + b_conditionbw, 
     	   cartoon = b_Intercept + b_conditioncartoon,
         photo = b_Intercept + b_conditionphoto) %>%
  select(obj, photo, cartoon, bw) %>%
  mean_hdi() %>%
  pivot_longer(cols = -c(.width:.interval),
               names_to = "index",
               values_to = "value") %>% 
  select(index, value) %>% 
  mutate(index = ifelse(str_detect(index, fixed(".")), index, str_c(index, ".mean"))) %>% 
  separate(index, into = c("parameter", "type"), sep = "\\.") %>% 
  pivot_wider(names_from = type, 
              values_from = value) %>%
  mutate_at(vars(2:4), plogis)

bayes_mod_pruned%>% emmeans(specs = pairwise~condition)
```


Run Bayesian analyses on pruned model with age

```{r}
bayes_mod_age_pruned <-  brm(formula = accuracy ~ condition * age_centered + (1 | child) + (1 | target_word), 
                              family=bernoulli(link="logit"), data = d, seed = 1)

summary(bayes_mod_age_pruned)

joint_tests(bayes_mod_age_pruned)

# model term             df1 df2 F.ratio   Chisq p.value
# condition                3 Inf   3.455  10.365  0.0157
# age_centered             1 Inf 100.641 100.641  <.0001
# condition:age_centered   3 Inf   5.167  15.501  0.0014
```

Get posterior estimates and 95% credible intervals

```{r}
bayes_mod_age_pruned %>%
  as_draws_df() %>%
  select(starts_with("b_")) %>% 
  mutate(obj = b_Intercept, 
         bw = b_Intercept + b_conditionbw, 
     	   cartoon = b_Intercept + b_conditioncartoon,
         photo = b_Intercept + b_conditionphoto) %>%
  select(obj, photo, cartoon, bw) %>%
  mean_hdi() %>%
  pivot_longer(cols = -c(.width:.interval),
               names_to = "index",
               values_to = "value") %>% 
  select(index, value) %>% 
  mutate(index = ifelse(str_detect(index, fixed(".")), index, str_c(index, ".mean"))) %>% 
  separate(index, into = c("parameter", "type"), sep = "\\.") %>% 
  pivot_wider(names_from = type, 
              values_from = value) %>%
  mutate_at(vars(2:4), plogis)

bayes_mod_age_pruned%>% emmeans(specs = pairwise~condition)
```

Running exploratory individual differences analyses - effect of picture experience on accuracy

```{r}

mod_pic <- glmer(accuracy ~ pic_interact * condition + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = d, family = "binomial")
summary(mod_pic)
#all null effects

mod_pic_age <- glmer(accuracy ~ pic_interact * age_centered * condition + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = d, family = "binomial")
summary(mod_pic_age)
#large main effect of age
#effect of pic interaction x age - p = .01
#though note warning - "model failed to converge with max|grad| = 0.0364136 (tol = 0.002, component 1)"

#now run the analyses on only picture conditions (remove object condition)

library(dplyr)
agg <- group_by(d, super_condition)
pic_condition <- subset(agg, super_condition == "pic")

mod_pic_only <- glmer(accuracy ~ pic_interact * condition + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = pic_condition, family = "binomial")
summary(mod_pic_only)
#all null effects

mod_pic_only_age <- glmer(accuracy ~ pic_interact * condition * age_centered + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = pic_condition, family = "binomial")
summary(mod_pic_only_age)
#main effect of age, but pic interaction x age effect goes away...

```

Running exploratory individual differences analyses - effect of picture experience on accuracy - separated by condition

```{r}
library(dplyr)
agg1 <- group_by(d, condition)
obj <- subset(agg1, condition == "obj")
photo <- subset(agg1, condition == "photo")
cartoon <- subset(agg1, condition == "cartoon")
bw <- subset(agg1, condition == "bw")

mod_obj <- glmer(accuracy ~ pic_interact + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = obj, family = "binomial")
summary(mod_obj)

mod_obj_age <- glmer(accuracy ~ pic_interact * age_centered + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = obj, family = "binomial")
summary(mod_obj_age)
#age x pic interaction effect

mod_photo <- glmer(accuracy ~ pic_interact + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = photo, family = "binomial")
summary(mod_photo)

mod_photo_age <- glmer(accuracy ~ pic_interact * age_centered + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = photo, family = "binomial")
summary(mod_photo_age)

mod_cartoon <- glmer(accuracy ~ pic_interact + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = cartoon, family = "binomial")
summary(mod_cartoon)

mod_cartoon_age <- glmer(accuracy ~ pic_interact * age_centered + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = cartoon, family = "binomial")
summary(mod_cartoon_age)
#failed to converge

mod_bw <- glmer(accuracy ~ pic_interact + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = bw, family = "binomial")
summary(mod_bw)

mod_bw_age <- glmer(accuracy ~ pic_interact * age_centered + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = bw, family = "binomial")
summary(mod_bw_age)

```
```{r}

```

Some data viz

```{r}
#plot all data

ms2 <- d |>
  group_by(child, condition, age, pic_interact, pic_num) |>
  summarise(accuracy = mean(accuracy))

ggplot(ms2, aes(x=pic_interact, y = accuracy, col = condition)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Interact with Picture Books")

ms_obj <- obj |>
  group_by(child, condition, age, pic_interact, pic_num) |>
  summarise(accuracy = mean(accuracy))

ms_photo <- photo |>
  group_by(child, condition, age, pic_interact, pic_num) |>
  summarise(accuracy = mean(accuracy))

ms_cartoon <- cartoon |>
  group_by(child, condition, age, pic_interact, pic_num) |>
  summarise(accuracy = mean(accuracy))

ms_bw <- bw |>
  group_by(child, condition, age, pic_interact, pic_num) |>
  summarise(accuracy = mean(accuracy))

obj_plot <- ggplot(ms_obj, aes(x=pic_interact, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Interact") +
  theme(legend.position = "bottom") +
  ggtitle("Obj") +
  ylim(0,1)

photo_plot <- ggplot(ms_photo, aes(x=pic_interact, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Interact") +
  theme(legend.position = "bottom") +
  ggtitle("Photo") +
  ylim(0,1)

cartoon_plot <- ggplot(ms_cartoon, aes(x=pic_interact, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Interact") +
  theme(legend.position = "bottom") +
  ggtitle("Cartoon") +
  ylim(0,1)

bw_plot <- ggplot(ms_bw, aes(x=pic_interact, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Interact") +
  theme(legend.position = "bottom") +
  ggtitle("Bw") +
  ylim(0,1)

require(gridExtra)
grid.arrange(obj_plot, photo_plot, cartoon_plot, bw_plot, ncol=4)

```

More data viz with a different picture experience variable - i.e., number of picture books in the home

```{r}
obj_plot2 <- ggplot(ms_obj, aes(x=pic_num, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Book Number") +
  theme(legend.position = "bottom") +
  ggtitle("Obj") +
  ylim(0,1)

photo_plot2 <- ggplot(ms_photo, aes(x=pic_num, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Book Number") +
  theme(legend.position = "bottom") +
  ggtitle("Photo") +
  ylim(0,1)

cartoon_plot2 <- ggplot(ms_cartoon, aes(x=pic_num, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Book Number") +
  theme(legend.position = "bottom") +
  ggtitle("Cartoon") +
  ylim(0,1)

bw_plot2 <- ggplot(ms_bw, aes(x=pic_num, y = accuracy, col = age)) + 
  geom_jitter(alpha = .5, height = .02, width = 0) + 
  geom_smooth(method = "lm") + 
  ylab("Accuracy") +
  xlab("Pic Book Number") +
  theme(legend.position = "bottom") +
  ggtitle("Bw") +
  ylim(0,1)

require(gridExtra)
grid.arrange(obj_plot2, photo_plot2, cartoon_plot2, bw_plot2, ncol=4)
```


Can rerun these analyses with a different picture experience variable - i.e., number of picture books in the home

```{r}
mod_pic_num <- glmer(accuracy ~ pic_num * condition + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = d, family = "binomial")
summary(mod_pic_num)
#all null effects

mod_pic_num_age <- glmer(accuracy ~ pic_num * condition * age_centered + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = d, family = "binomial")
summary(mod_pic_num_age)
#large main effect of age
#nothing else

#now run the analyses on only picture conditions (remove object condition)

library(dplyr)
agg <- group_by(d, super_condition)
pic_condition <- subset(agg, super_condition == "pic")

mod_pic_num_only <- glmer(accuracy ~ pic_num * condition + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = pic_condition, family = "binomial")
summary(mod_pic_num_only)
#all null effects

mod_pic_num_only_age <- glmer(accuracy ~ pic_num * condition * age_centered + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = pic_condition, family = "binomial")
summary(mod_pic_num_only_age)
#effect of photo condition and age?
```

Can rerun these analyses with a different picture experience variable - i.e., number of picture books in the home - separated by condition

```{r}

#all null
#except for main effect of age

mod_obj_num <- glmer(accuracy ~ pic_num + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = obj, family = "binomial")
summary(mod_obj_num)

mod_obj_num_age <- glmer(accuracy ~ pic_num * age_centered + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = obj, family = "binomial")
summary(mod_obj_num_age)
#age x pic interaction effect

mod_photo_num <- glmer(accuracy ~ pic_num + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = photo, family = "binomial")
summary(mod_photo_num)

mod_photo_num_age <- glmer(accuracy ~ pic_num * age_centered + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = photo, family = "binomial")
summary(mod_photo_num_age)

mod_cartoon_num <- glmer(accuracy ~ pic_num + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = cartoon, family = "binomial")
summary(mod_cartoon_num)

mod_cartoon_num_age <- glmer(accuracy ~ pic_num * age_centered + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = cartoon, family = "binomial")
summary(mod_cartoon_num_age)

mod_bw_num <- glmer(accuracy ~ pic_num + play + talk + toy_num + maternal_ed +  (1 | target_word),
              data = bw, family = "binomial")
summary(mod_bw_num)

mod_bw_num_age <- glmer(accuracy ~ pic_num * age_centered + play + talk + toy_num + maternal_ed + (1 | target_word),
              data = bw, family = "binomial")
summary(mod_bw_num_age)

```

Full Bayesian model for exploratory analyses?

```{r}
#keep getting errors in the bayesian models
#Error in solve.default(zcov, z) : 
#system is computationally singular: reciprocal condition number = 3.5628e-17

bayes_mod_pic <- brm(formula = accuracy ~ pic_interact + play + talk + toy_num + maternal_ed + (condition | target_word),
                 family=bernoulli(link="logit"), data = d, seed = 1)

joint_tests(bayes_mod_pic)

bayes_mod_pic_only <- brm(formula = accuracy ~ pic_interact + play + talk + toy_num + maternal_ed + (condition | target_word),
                 family=bernoulli(link="logit"), data = pic_condition, seed = 1)

joint_tests(bayes_mod_pic)
```

Exploratory factor analysis on caregiver questionnaire variables

```{r}

d2 <- select(d, pic_interact, pic_num, draw_num, poster_num, tv_num) 

ev <- eigen(cor(d2)) # get eigenvalues
ev$values

scree(d2, pc=FALSE) 

fa.parallel(d2, fa="fa")
#Parallel analysis suggests that the number of factors =  3  and the number of components =  NA 
#but fit 2 factors because 3 factors are too many for 5 variables

#assume correlation between variables
Nfacs <- 2
fit <- factanal(d2, Nfacs, rotation="promax")
print(fit, digits=2, cutoff=0.3, sort=TRUE)

#Loadings:
#             Factor1 Factor2
#draw_num      1.00          
#poster_num            0.87  
#pic_interact          0.32  
#pic_num       0.36          
#tv_num                0.34  

#assume independence between variables
Nfacs <- 2
fit <- factanal(d2, Nfacs, rotation="varimax")
print(fit, digits=2, cutoff=0.3, sort=TRUE)

#Loadings:
#             Factor1 Factor2
#draw_num     1.00           
#poster_num           0.83   
#pic_interact                
#pic_num      0.40           
#tv_num               0.32   

```

Confirmatory factor analysis

```{r}
all_mod <- 'all_items =~ draw_num + pic_num + poster_num + tv_num + pic_interact'
num_mod <- 'num_items =~ draw_num + pic_num + poster_num + tv_num'

all_fit <- cfa(all_mod, data = d2)
summary(all_fit, fit.measures = TRUE)
#RMSEA = 0.159

num_fit <- cfa(num_mod, data = d2)
summary(num_fit, fit.measures = TRUE)
#RMSEA = 0.182

#get alphas too
 
psych::alpha(d2[c("draw_num", "pic_num", "poster_num", "tv_num")])
 
psych::alpha(d2)

two_mod <- 'kid_items =~ draw_num + pic_num
            wall_items =~ poster_num + tv_num'

two_fit <- cfa(two_mod, data = d2)
summary(two_fit, fit.measures = TRUE)

psych::alpha(d2[c("draw_num", "pic_num")])
psych::alpha(d2[c("poster_num", "tv_num")])

#two factor model isn't great either though

```

Histograms of variable distributions

```{r}

ggplot(d2, aes(x = pic_interact)) + 
  geom_histogram(binwidth = 1)

ggplot(d2, aes(x = pic_num)) + 
  geom_histogram(binwidth = 1)

ggplot(d2, aes(x = draw_num)) + 
  geom_histogram(binwidth = 1)

ggplot(d2, aes(x = poster_num)) + 
  geom_histogram(binwidth = 1)

ggplot(d2, aes(x = tv_num)) + 
  geom_histogram(binwidth = 1)



```

